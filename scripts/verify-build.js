#!/usr/bin/env node\n\n/**\n * Production Build Verification Script\n * Verifies that the production build meets all requirements\n */\n\nconst fs = require('fs');\nconst path = require('path');\nconst { execSync } = require('child_process');\n\nconst colors = {\n  green: '\\x1b[32m',\n  red: '\\x1b[31m',\n  yellow: '\\x1b[33m',\n  blue: '\\x1b[34m',\n  reset: '\\x1b[0m'\n};\n\nfunction log(message, color = 'reset') {\n  console.log(`${colors[color]}${message}${colors.reset}`);\n}\n\nfunction checkFileExists(filePath, description) {\n  if (fs.existsSync(filePath)) {\n    log(`✓ ${description}`, 'green');\n    return true;\n  } else {\n    log(`✗ ${description}`, 'red');\n    return false;\n  }\n}\n\nfunction checkBundleSize() {\n  log('\\n📦 Checking bundle size...', 'blue');\n  \n  const buildDir = path.join(__dirname, '../.next');\n  if (!fs.existsSync(buildDir)) {\n    log('✗ Build directory not found', 'red');\n    return false;\n  }\n  \n  try {\n    const staticDir = path.join(buildDir, 'static');\n    if (fs.existsSync(staticDir)) {\n      const stats = execSync(`du -sh ${staticDir}`, { encoding: 'utf8' });\n      const size = stats.split('\\t')[0];\n      log(`Bundle size: ${size}`, 'yellow');\n      \n      // Check if size is reasonable (less than 10MB)\n      const sizeInMB = parseFloat(size.replace('M', ''));\n      if (sizeInMB < 10) {\n        log('✓ Bundle size is within acceptable limits', 'green');\n        return true;\n      } else {\n        log('✗ Bundle size is too large', 'red');\n        return false;\n      }\n    }\n  } catch (error) {\n    log(`Warning: Could not check bundle size: ${error.message}`, 'yellow');\n    return true; // Don't fail the build for this\n  }\n  \n  return true;\n}\n\nfunction checkEnvironmentConfig() {\n  log('\\n🔧 Checking environment configuration...', 'blue');\n  \n  const requiredEnvVars = [\n    'NODE_ENV',\n    'NEXT_PUBLIC_APP_ENV'\n  ];\n  \n  let allPresent = true;\n  \n  requiredEnvVars.forEach(envVar => {\n    if (process.env[envVar]) {\n      log(`✓ ${envVar}: ${process.env[envVar]}`, 'green');\n    } else {\n      log(`✗ ${envVar} is not set`, 'red');\n      allPresent = false;\n    }\n  });\n  \n  return allPresent;\n}\n\nfunction checkSecurityHeaders() {\n  log('\\n🔒 Checking security configuration...', 'blue');\n  \n  const nextConfigPath = path.join(__dirname, '../next.config.ts');\n  if (!fs.existsSync(nextConfigPath)) {\n    log('✗ next.config.ts not found', 'red');\n    return false;\n  }\n  \n  const configContent = fs.readFileSync(nextConfigPath, 'utf8');\n  \n  const securityChecks = [\n    { check: 'X-Frame-Options', pattern: /X-Frame-Options/ },\n    { check: 'X-Content-Type-Options', pattern: /X-Content-Type-Options/ },\n    { check: 'Referrer-Policy', pattern: /Referrer-Policy/ },\n    { check: 'Permissions-Policy', pattern: /Permissions-Policy/ }\n  ];\n  \n  let allPresent = true;\n  \n  securityChecks.forEach(({ check, pattern }) => {\n    if (pattern.test(configContent)) {\n      log(`✓ ${check} header configured`, 'green');\n    } else {\n      log(`✗ ${check} header not configured`, 'red');\n      allPresent = false;\n    }\n  });\n  \n  return allPresent;\n}\n\nfunction checkBuildArtifacts() {\n  log('\\n🏗️  Checking build artifacts...', 'blue');\n  \n  const checks = [\n    { path: '.next/BUILD_ID', description: 'Build ID file' },\n    { path: '.next/build-manifest.json', description: 'Build manifest' },\n    { path: '.next/prerender-manifest.json', description: 'Prerender manifest' },\n    { path: '.next/static', description: 'Static assets directory' },\n    { path: '.next/server', description: 'Server directory' }\n  ];\n  \n  let allPresent = true;\n  \n  checks.forEach(({ path: filePath, description }) => {\n    const fullPath = path.join(__dirname, '..', filePath);\n    if (!checkFileExists(fullPath, description)) {\n      allPresent = false;\n    }\n  });\n  \n  return allPresent;\n}\n\nfunction checkPackageJson() {\n  log('\\n📋 Checking package.json configuration...', 'blue');\n  \n  const packageJsonPath = path.join(__dirname, '../package.json');\n  if (!fs.existsSync(packageJsonPath)) {\n    log('✗ package.json not found', 'red');\n    return false;\n  }\n  \n  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));\n  \n  const requiredScripts = [\n    'build',\n    'start',\n    'lint',\n    'test',\n    'test:e2e'\n  ];\n  \n  let allPresent = true;\n  \n  requiredScripts.forEach(script => {\n    if (packageJson.scripts && packageJson.scripts[script]) {\n      log(`✓ Script '${script}' is defined`, 'green');\n    } else {\n      log(`✗ Script '${script}' is missing`, 'red');\n      allPresent = false;\n    }\n  });\n  \n  // Check version\n  if (packageJson.version) {\n    log(`✓ Version: ${packageJson.version}`, 'green');\n  } else {\n    log('✗ Version not specified', 'red');\n    allPresent = false;\n  }\n  \n  return allPresent;\n}\n\nfunction checkTypeScript() {\n  log('\\n📝 Checking TypeScript configuration...', 'blue');\n  \n  try {\n    execSync('npm run type-check', { stdio: 'pipe' });\n    log('✓ TypeScript compilation successful', 'green');\n    return true;\n  } catch (error) {\n    log('✗ TypeScript compilation failed', 'red');\n    log(error.stdout?.toString() || error.message, 'red');\n    return false;\n  }\n}\n\nfunction checkLinting() {\n  log('\\n🔍 Checking code linting...', 'blue');\n  \n  try {\n    execSync('npm run lint', { stdio: 'pipe' });\n    log('✓ Linting passed', 'green');\n    return true;\n  } catch (error) {\n    log('✗ Linting failed', 'red');\n    log(error.stdout?.toString() || error.message, 'red');\n    return false;\n  }\n}\n\nfunction checkTests() {\n  log('\\n🧪 Checking tests...', 'blue');\n  \n  try {\n    // Run unit tests only (exclude e2e)\n    execSync('npm run test -- --passWithNoTests', { stdio: 'pipe' });\n    log('✓ Unit tests passed', 'green');\n    return true;\n  } catch (error) {\n    log('✗ Unit tests failed', 'red');\n    log(error.stdout?.toString() || error.message, 'red');\n    return false;\n  }\n}\n\nfunction checkDocumentation() {\n  log('\\n📚 Checking documentation...', 'blue');\n  \n  const docs = [\n    { path: 'README.md', description: 'Main README' },\n    { path: 'docs/API_DOCUMENTATION.md', description: 'API Documentation' },\n    { path: 'docs/ARCHITECTURE.md', description: 'Architecture Guide' },\n    { path: 'docs/DEVELOPMENT.md', description: 'Development Guide' },\n    { path: 'docs/DEPLOYMENT.md', description: 'Deployment Guide' }\n  ];\n  \n  let allPresent = true;\n  \n  docs.forEach(({ path: filePath, description }) => {\n    const fullPath = path.join(__dirname, '..', filePath);\n    if (!checkFileExists(fullPath, description)) {\n      allPresent = false;\n    }\n  });\n  \n  return allPresent;\n}\n\nfunction generateReport(results) {\n  log('\\n📊 Build Verification Report', 'blue');\n  log('================================', 'blue');\n  \n  const passed = results.filter(r => r.passed).length;\n  const total = results.length;\n  \n  results.forEach(result => {\n    const status = result.passed ? '✓' : '✗';\n    const color = result.passed ? 'green' : 'red';\n    log(`${status} ${result.name}`, color);\n  });\n  \n  log(`\\nOverall: ${passed}/${total} checks passed`, passed === total ? 'green' : 'red');\n  \n  if (passed === total) {\n    log('\\n🎉 Build verification successful! Ready for deployment.', 'green');\n    return true;\n  } else {\n    log('\\n❌ Build verification failed. Please fix the issues above.', 'red');\n    return false;\n  }\n}\n\nfunction main() {\n  log('🚀 VibePipe MVP Build Verification', 'blue');\n  log('===================================\\n', 'blue');\n  \n  const checks = [\n    { name: 'Package Configuration', fn: checkPackageJson },\n    { name: 'Environment Configuration', fn: checkEnvironmentConfig },\n    { name: 'TypeScript Compilation', fn: checkTypeScript },\n    { name: 'Code Linting', fn: checkLinting },\n    { name: 'Unit Tests', fn: checkTests },\n    { name: 'Build Artifacts', fn: checkBuildArtifacts },\n    { name: 'Bundle Size', fn: checkBundleSize },\n    { name: 'Security Configuration', fn: checkSecurityHeaders },\n    { name: 'Documentation', fn: checkDocumentation }\n  ];\n  \n  const results = checks.map(check => {\n    try {\n      const passed = check.fn();\n      return { name: check.name, passed };\n    } catch (error) {\n      log(`Error in ${check.name}: ${error.message}`, 'red');\n      return { name: check.name, passed: false };\n    }\n  });\n  \n  const success = generateReport(results);\n  process.exit(success ? 0 : 1);\n}\n\nif (require.main === module) {\n  main();\n}\n\nmodule.exports = {\n  checkFileExists,\n  checkBundleSize,\n  checkEnvironmentConfig,\n  checkSecurityHeaders,\n  checkBuildArtifacts,\n  checkPackageJson,\n  checkTypeScript,\n  checkLinting,\n  checkTests,\n  checkDocumentation\n};\n"